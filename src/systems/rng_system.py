from enum import Enum, auto
import random
import sys

from utils.singleton import Singleton


class Generator(Enum):
    MAP = auto()
    ENEMIES = auto()
    PLAYER = auto()
    TECHNOLOGY = auto()
    MAGIC = auto()


class RngSystem(metaclass=Singleton):
    def __init__(self):
        # Use at most 9 digits (base 10) for seeds
        self.__max_seed_number = 10**9 - 1
        self.__global_rng = random.Random()
        initial_seed = random.randrange(self.__max_seed_number)
        self.initial_seed = initial_seed
        self.__global_rng.seed(initial_seed)
        self.rngs = {}
        self.__seed_generators()

    def __seed_generators(self):
        # initialize Generators with a seed generated by the global rng
        for generator in Generator:
            self.rngs[generator] = random.Random(
                self.__global_rng.randrange(self.__max_seed_number)
            )

    def set_state(self, states):
        for generator, state in states.items():
            self.rngs[generator].setstate(state)

    def get_state(self):
        return {generator: self.rngs[generator].getstate() for generator in Generator}

    def reset(self):
        self.seed(self.initial_seed)

    def new_seed(self):
        initial_seed = random.randrange(self.__max_seed_number)
        self.initial_seed = initial_seed
        self.seed(initial_seed)

    def seed(self, seed):
        self.initial_seed = seed
        self.__global_rng.seed(seed)
        self.__seed_generators()

    def get_seed(self):
        return self.initial_seed

    def get_rng(self, generator):
        return self.rngs[generator]

    def random(self, generator):
        return self.rngs[generator].random()

    def randbytes(self, generator, n):
        return self.rngs[generator].randbytes(n)
