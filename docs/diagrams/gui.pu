@startuml gui

class gui.BaseGui extends pygame.sprite.Sprite {
	+ image: pygame.Surface
	+ rect: pygame.Rect
	+ position: numpy.ndarray

	+ BaseGui(surface: pygame.Surface, position: numpy.ndarray)
	+ set_surface(surface: pygame.Surface)
	+ set_position(position: numpy.ndarray)
	+ set_position_rel(position: numpy.ndarray)
	+ is_inside(position: numpy.ndarray): bool
}

class gui.Button extends gui.BaseGui {
	+ action: function
	+ on_select: function
	+ on_deselect: function
	+ is_selected: bool
	+ select_sound: Resource
	+ confirm_sound: Resource

	+ Button(surface: pygame.Surface, action: function,
	on_select: function, on_deselect: function, position: numpy.ndarray)
	+ execute_action()
	+ select()
	+ deselect()
}

class gui.TextButton extends gui.Button {
	+ text: string
	+ font: pygame.Font
	+ color: tuple
	+ color_hover: tuple

	+ TextButton(text: string, font: pygame.Font, color: tuple,
	color_hover: tuple, action: function, position: numpy.ndarray)
	+ set_text(text: string)
	+ set_color(color: tuple)
	- render_font(text: string, color: tuple) -> pygame.Surface
}

class gui.Text extends gui.BaseGui {
	+ Text(text: string, font: pygame.Font, color: tuple, 
	position: numpy.ndarray)
	+ text: string
	+ font: pygame.Font
	+ color: tuple
}

class gui.Title extends gui.Text {
	+ Title(text: string, color: tuple,
	position: numpy.ndarray)
}

class gui.BlinkText extends gui.Text {
	+ current_time: number
	+ is_visible: bool
	+ only_once: bool
	- blink_time: number

	+ BlinkText(text: string, font: pygame.Font,\ncolor: tuple, position: numpy.ndarray,
	blink_time: number, only_once: bool)
	+ update(elapsed_time: number)
}

class gui.FullScreenButton extends gui.TextButton {
	+ full_screen: bool

	+ FullScreenButton(full_screen: bool, font: pygame.Font, color: tuple,
	color_hover: tuple, action: function, position: numpy.ndarray)
	- get_full_text(): string
	+ toggle_full_screen()
}

class gui.ActionButton extends gui.TextButton {
	- previous_color: tuple

	+ ActionButton(text: string, font: pygame.Font, color: tuple,
	color_hover: tuple, action: function, position: numpy.ndarray)
	- action(action: function)
	+ reset_color()
}

class gui.RebindButton extends gui.ActionButton {
	+ action_text: string
	+ bind_action: string
	+ bind_key: string

	+ RebindButton(action_text: string, bind_action: string, bind_key: string,\nfont: pygame.Font, color: tuple, color_hover: tuple,
	action: function, position: numpy.ndarray)
	- get_full_text(): string
	+ rebind_action(bind_key: pygame.Key)
}

class gui.SeedButton extends gui.ActionButton {
	+ seed: string

	+ SeedButton(seed: string, font: pygame.Font, color: tuple,
	color_hover: tuple, action: function, position: numpy.ndarray)
	- get_full_text(): string
	+ remove_last_char()
	+ add_char(char: string)
	+ set_seed(seed: string)
	+ empty_seed()
}

class gui.VolumeButton extends gui.ActionButton {
	+ volume_text: string
	+ volume_level: number
	+ increase_volume_cb: function
	+ decrease_volume_cb: function

	+ VolumeButton(volume_text: string, volume_level: number,\nincrease_volume_cb: function, decrease_volume_cb: function,\nfont: pygame.Font, color: tuple,color_hover: tuple,
	action: function, position: numpy.ndarray)
	- get_full_text(): string
	+ set_volume(volume: number)
}

class gui.UpgradeCard extends gui.Button {
	+ title: string
	+ icon: pygame.Surface
	+ font: pygame.Font
	+ width: number
	+ height: number

	+ UpgradeCard(title: string, icon: pygame.Surface, font: pygame.Font,
	width: number, height: number, action: function, position: numpy.ndarray)
	- render_card(): pygame.Surface
	+ on_select()
	+ on_deselect()
}

gui.Button -left-> systems.SoundController
gui.RebindButton -left-> systems.ControlSystem


@enduml
