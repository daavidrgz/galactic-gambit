@startuml io_systems


class utils.Singleton{
    + getInstance()
}
class systems.CameraManager extends utils.Singleton{
    + x: number
    + y: number
    + target_x: number
    + target_y: number
    + shake: number

    + CameraManager()
    + update(elapsed_time: number)
    + set_coords(coords: tuple[number, number])
    + get_coords(): tuple[number, number]
    + set_center(coords: tuple[number, number])
    + get_center(): tuple[number, number]
    + set_target_center(coords: tuple[number, number])
    + set_shake(shake: number)
}

class systems.ControlSystem extends utils.Singleton{
    + actions: dict[systems.Action, number]
    - pressed_keys: list[boolean]

    + ControlSystem()
    + is_active_action(action: systems.Action): boolean
    + is_key_pressed(key: number): boolean
    + refresh_pressed_keys()
    + rebind_action(action: systems.Action, key: number)
    + get_action_key(action: systems.Action): number
    + is_mouse_pressed(): boolean
    + get_mouse_pos(): tuple[number, number]
    + user_pos_to_design(x: number, y: number ): tuple[number, number]
}

systems.ControlSystem "1" o-- "N" systems.Action
class systems.Action extends Enum{
    + {static} UP
    + {static} DOWN
    + {static} LEFT
    + {static} RIGHT
}

class systems.ResourceManager extends utils.Singleton{

    + ResourceManager()
    + load_image(image_resource: systems.Resource): pygame.Surface
    + load_sound(sound_resource: systems.Resource): pygame.mixer.Sound
    + load_sounds(sound_resources: systems.Resource): list[pygame.mixer.Sound]
    + load_tile(tile_resource: systems.Resource): pygame.Surface
    + load_font(font_resource: systems.Resource): pygame.font.Font
    + load_animation(animation_resource: systems.Resource): list[animation.AnimationFrame]
    - load_sprite(rel_path: string, scale: number, flip: boolean): pygame.Surface
    - load_sound(rel_path: string): pygame.mixer.Sound
}
systems.ResourceManager "1" o-- "N" systems.Resource

class systems.Resource extends Enum{}

class systems.RandomSounds{
    + sounds: list[pygame.mixer.Sound]
    + delay: number
    + current_delay: number
    + playing: boolean

    
    + RandomSounds(sounds_resource: system.Resource)
    + update(elapsed_time: number)
    + play()
    + stop()
}
systems.RandomSounds --> systems.SoundController
class systems.CycleSounds{
    + sounds: list[pygame.mixer.Sound]
    + delay: number
    + current_delay: number
    + playing: boolean

    + CycleSounds(sounds_resource: system.Resource)
    + update(elapsed_time: number)
    + play()
    + play_once()
    + stop()
    - play_sound(sound: pygame.mixer.Sound)
}
systems.CycleSounds --> systems.SoundController

class systems.SoundController extends utils.Singleton{
    + current_music: systems.Resource

    + SoundController()
    + play()
    + pause()
    + set_music_volume(volume: number)
    + set_effects_volume(volume: number)
    + get_music_volume(): number
    + get_effects_volume(): number
    + increase_music_volume()
    + decrease_music_volume()
    + increase_effects_volume()
    + decrease_effects_volume()
    + set_relative_volume_music(rel_volume: number)
    + set_relative_volume_sound(loaded_sound: pygame.mixer.Sound,
        rel_ volume: number)
    + play_music(music: systems.Resource)
    + play_sound(sound: systems.Resource, max_time: number)
    + play_sound_raw(sound: pygame.mixer.Sound, volume: number)
    - switch_music_internal(music: systems.Resource)
    - play_music_internal(music: systems.Resource)

}
systems.SoundController -right-> systems.ResourceManager

@enduml